name: Smart PR Check

on:
  pull_request:
    types: [opened, synchronize, reopened]
  issue_comment:
    types: [created]

# ADD THIS PERMISSIONS BLOCK HERE
permissions:
  statuses: write
  contents: read
  pull-requests: write
  issues: write

jobs:
  # Job 1: Check if test is required based on file changes
  check-if-test-required:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    outputs:
      test-required: ${{ steps.check-files.outputs.test-required }}
      pr-number: ${{ github.event.pull_request.number }}
      head-sha: ${{ github.event.pull_request.head.sha }}
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changes in files that require testing  
        uses: dorny/paths-filter@v2
        id: check-files
        with:
          filters: |
            test-required:
              - '!*.md'
              - '!*.txt'
              - '!docs/**'
              - '!README*'
              - '!LICENSE'
              - '!.gitignore'
              - '!.github/workflows/**'
              - '**'

      - name: Set commit status based on requirement
        uses: myrotvorets/set-commit-status-action@v1.1.7
        with:
          sha: ${{ github.event.pull_request.head.sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ steps.check-files.outputs.test-required == 'true' && 'pending' || 'success' }}
          context: 'Special Test Check'
          description: ${{ steps.check-files.outputs.test-required == 'true' && 'Test required - comment "run test" to execute' || 'Test not required - no relevant files changed' }}

  # Job 2: Run actual test when comment is made
  run-test-on-comment:
    if: github.event_name == 'issue_comment' && github.event.issue.pull_request && contains(github.event.comment.body, 'run test')
    runs-on: ubuntu-latest
    timeout-minutes: 50
    steps:
      - name: Get branch of PR
        uses: xt0rted/pull-request-comment-branch@v2
        id: comment-branch

      - name: Set latest commit status as pending
        uses: myrotvorets/set-commit-status-action@v1.1.7
        with:
          sha: ${{ steps.comment-branch.outputs.head_sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          status: pending
          context: 'Special Test Check'
          description: 'Running tests...'

      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.comment-branch.outputs.head_ref }}
          fetch-depth: 0

      - name: Check if test is actually required
        uses: dorny/paths-filter@v2
        id: verify-requirement  
        with:
          filters: |
            should-run-test:
              - '!*.md'
              - '!*.txt'
              - '!docs/**'
              - '!README*'
              - '!LICENSE'
              - '!.gitignore'
              - '!.github/workflows/**'
              - '**'

      - name: Count lines in src/Main.kt
        id: count-lines
        if: steps.verify-requirement.outputs.should-run-test == 'true'
        run: |
          if [ -f "src/Main.kt" ]; then
            LINE_COUNT=$(wc -l < src/Main.kt)
            echo "Line count in src/Main.kt: $LINE_COUNT"
            echo "line-count=$LINE_COUNT" >> $GITHUB_OUTPUT
          
            if [ $LINE_COUNT -gt 100 ]; then
              echo "‚ùå Test FAILED: src/Main.kt has $LINE_COUNT lines (exceeds 100 line limit)"
              echo "test-result=failure" >> $GITHUB_OUTPUT
              echo "test-message=‚ùå Test FAILED: src/Main.kt has $LINE_COUNT lines (exceeds 100 line limit)" >> $GITHUB_OUTPUT
            else
              echo "‚úÖ Test PASSED: src/Main.kt has $LINE_COUNT lines (within 100 line limit)"
              echo "test-result=success" >> $GITHUB_OUTPUT
              echo "test-message=‚úÖ Test PASSED: src/Main.kt has $LINE_COUNT lines (within 100 line limit)" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚ùå Test FAILED: src/Main.kt not found"
            echo "test-result=failure" >> $GITHUB_OUTPUT
            echo "test-message=‚ùå Test FAILED: src/Main.kt not found" >> $GITHUB_OUTPUT
          fi

      - name: Send test result comment
        if: always() && steps.verify-requirement.outputs.should-run-test == 'true'
        uses: mshick/add-pr-comment@v2
        with:
          refresh-message-position: true
          message: |
            ## Smart PR Check Results üéØ
            
            **Commit:** [${{ steps.comment-branch.outputs.head_sha }}](https://github.com/${{ github.repository }}/commit/${{ steps.comment-branch.outputs.head_sha }})
            
            **Test Result:** ${{ steps.count-lines.outputs.test-message }}
            
            **Details:**
            - File checked: `src/Main.kt`
            - Line count: ${{ steps.count-lines.outputs.line-count || 'N/A' }}
            - Limit: 100 lines
            
            [View full workflow run ‚Üí](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

      - name: Send skip comment if test not required
        if: always() && steps.verify-requirement.outputs.should-run-test == 'false'
        uses: mshick/add-pr-comment@v2
        with:
          refresh-message-position: true
          message: |
            ## Smart PR Check Results üéØ
            
            **Commit:** [${{ steps.comment-branch.outputs.head_sha }}](https://github.com/${{ github.repository }}/commit/${{ steps.comment-branch.outputs.head_sha }})
            
            **Result:** ‚è≠Ô∏è **Test Skipped** - Only ignored files were changed
            
            No relevant files were modified that require testing.

      - name: Set final commit status
        if: always()
        uses: myrotvorets/set-commit-status-action@v1.1.7
        with:
          sha: ${{ steps.comment-branch.outputs.head_sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ steps.verify-requirement.outputs.should-run-test == 'false' && 'success' || steps.count-lines.outputs.test-result }}
          context: 'Special Test Check'
          description: ${{ steps.verify-requirement.outputs.should-run-test == 'false' && 'Test skipped - no relevant files changed' || steps.count-lines.outputs.test-message }}